import streamlit as st
import pandas as pd
import os
from parser import parse_tcx, extract_features
from model import train_model

# Path to your training data
DB_PATH = "data/training_data.csv"

st.subheader("📁 Upload Ride Data to Train Model")

uploaded_file = st.file_uploader("Upload a Garmin .tcx file", type=["tcx"])

st.markdown("### 👤 Rider Info + Ride Metadata")
col1, col2 = st.columns(2)
with col1:
    age = st.number_input("Age", 10, 100, 30)
    height = st.number_input("Height (cm)", 100, 250, 175)
    gender = st.selectbox("Gender", ["Male", "Female"])
with col2:
    weight = st.number_input("Weight (kg)", 30, 200, 70)
    calories = st.number_input("Calories burned (from Garmin, Strava, etc.)", 100, 2000, 600)

# If file is uploaded
if uploaded_file:
    df = parse_tcx(uploaded_file)
    user_meta = {
        "age": age,
        "gender": gender,
        "height": height,
        "weight": weight
    }
    features = extract_features(df, user_meta)
    features["calories"] = calories

    st.markdown("### 🔍 Extracted Ride Features")
    st.json(features)

    if st.button("➕ Add to Dataset"):
        df_new = pd.DataFrame([features])
        os.makedirs("data", exist_ok=True)

        if os.path.exists(DB_PATH):
            df_existing = pd.read_csv(DB_PATH)
            df_all = pd.concat([df_existing, df_new], ignore_index=True)
        else:
            df_all = df_new

        df_all.to_csv(DB_PATH, index=False)
        st.success("✅ Ride added to training_data.csv!")

# Train model section
if os.path.exists(DB_PATH):
    st.markdown("### 📊 Training Dataset")
    df_train = pd.read_csv(DB_PATH)
    st.dataframe(df_train.tail())

    if st.button("🚀 Train Calorie Prediction Model"):
        model = train_model(df_train)
        st.success("🎉 Model trained and saved to models/calorie_predictor.pkl")
else:
    st.info("Upload at least one .tcx file with calorie data to start training.")
